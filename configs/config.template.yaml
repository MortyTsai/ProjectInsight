# configs/config.template.yaml
# ======================================================================
# ProjectInsight - 設定檔範本
# ======================================================================
# 說明:
# 1. 將此檔案複製一份，並重新命名為一個新的 .yaml 檔案 (例如 my_project.yaml)。
# 2. 根據您的專案需求，修改新檔案中的參數。
# 3. 使用 -c 或 --config 參數來指定您要使用的設定檔，例如：
#    python -m projectinsight.main -c configs/my_project.yaml
#
# 路徑設定教學:
# - 所有路徑都將被視為相對於「本設定檔所在的目錄」。
# - 推薦使用正斜線 '/'，因為它在所有作業系統上都能正常工作。
# ======================================================================

# --- 專案路徑設定 ---
# [必要] 要分析的目標專案的原始碼根目錄。
# 範例 1: 分析一個與 ProjectInsight 專案位於同一層級的專案。
target_src_path: "../../path/to/another/project/src/package"
# 範例 2: 分析一個位於完全不同位置的專案 (請使用絕對路徑)。
# target_src_path: "D:/path/to/another/project/src/package"

# [必要] 目標專案的根套件名稱。
# 這將作為過濾內部/外部依賴的基準。
root_package_name: "project_name"

# --- 輸出設定 ---
# [可選] 生成圖表的輸出目錄。
# 預設會輸出到 ProjectInsight 專案根目錄下的 'output' 資料夾。
output_dir: "../output"

# --- 架構層級定義 (核心) ---
# [可選] 用於定義圖表的顏色、佈局和圖例。
# - key: 您專案中的頂層子套件名稱 (例如 'core', 'services')。
# - name: 將顯示在圖例中的中文名稱。
# - color: 該層級的背景顏色 (十六進位碼)。
# - rank: 佈局層級。可選值: 'control' (最左側), 'application' (中間), 'infrastructure' (最右側)。
architecture_layers:
  core:
    name: "策略與協調層"
    color: "#FFDDC1"
    rank: "control"
  web:
    name: "使用者介面層"
    color: "#C1E1FF"
    rank: "control"
  processors:
    name: "核心應用邏輯層"
    color: "#FFFAC1"
    rank: "application"
  workers:
    name: "背景消費者層"
    color: "#D4F0F0"
    rank: "application"
  jobs:
    name: "背景作業層"
    color: "#D4F0F0"
    rank: "application"
  services:
    name: "基礎設施服務層"
    color: "#D1FFC1"
    rank: "infrastructure"
  streams:
    name: "基礎設施服務層"
    color: "#D1FFC1"
    rank: "infrastructure"
  configs:
    name: "設定層"
    color: "#E0C1FF"
    rank: "infrastructure"
  utils:
    name: "通用工具層"
    color: "#CCCCCC"
    rank: "infrastructure"